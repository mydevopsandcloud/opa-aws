package wiz

import data.generic.common as common_lib
import data.generic.terraform as terralib

# Check if AWS Network Firewall policy is associated with stateless rule groups
# Rule FAILS/NON-Compliant if no stateless rule group is associated with the Network Firewall policy
WizPolicy[result] {
    resource := input.document[i].resource.aws_networkfirewall_firewall_policy[name]
    
    # Check if firewall_policy block exists
    not terralib.validKey(resource, "firewall_policy")
    
    result := {
        "documentId": input.document[i].id,
        "resourceName": terralib.get_resource_name(resource, name),
        "resourceType": "aws_networkfirewall_firewall_policy",
        "searchKey": sprintf("aws_networkfirewall_firewall_policy[%s]", [name]),
        "issueType": "MissingAttribute",
        "keyExpectedValue": sprintf("'aws_networkfirewall_firewall_policy[%s].firewall_policy' should be defined", [name]),
        "keyActualValue": sprintf("'aws_networkfirewall_firewall_policy[%s].firewall_policy' is undefined", [name]),
        "resourceTags": object.get(resource, "tags", {}),
    }
}

WizPolicy[result] {
    resource := input.document[i].resource.aws_networkfirewall_firewall_policy[name]
    terralib.validKey(resource, "firewall_policy")
    firewall_policy := resource.firewall_policy[_]
    
    # Check if stateless_rule_group_reference exists
    not terralib.validKey(firewall_policy, "stateless_rule_group_reference")
    
    result := {
        "documentId": input.document[i].id,
        "resourceName": terralib.get_resource_name(resource, name),
        "resourceType": "aws_networkfirewall_firewall_policy",
        "searchKey": sprintf("aws_networkfirewall_firewall_policy[%s].firewall_policy", [name]),
        "issueType": "MissingAttribute",
        "keyExpectedValue": sprintf("'aws_networkfirewall_firewall_policy[%s].firewall_policy.stateless_rule_group_reference' should be defined", [name]),
        "keyActualValue": sprintf("'aws_networkfirewall_firewall_policy[%s].firewall_policy.stateless_rule_group_reference' is undefined", [name]),
        "resourceTags": object.get(resource, "tags", {}),
    }
}

WizPolicy[result] {
    resource := input.document[i].resource.aws_networkfirewall_firewall_policy[name]
    terralib.validKey(resource, "firewall_policy")
    firewall_policy := resource.firewall_policy[_]
    
    # Check if stateless_rule_group_reference exists but is empty array
    terralib.validKey(firewall_policy, "stateless_rule_group_reference")
    stateless_rule_groups := firewall_policy.stateless_rule_group_reference
    count(stateless_rule_groups) == 0
    
    result := {
        "documentId": input.document[i].id,
        "resourceName": terralib.get_resource_name(resource, name),
        "resourceType": "aws_networkfirewall_firewall_policy",
        "searchKey": sprintf("aws_networkfirewall_firewall_policy[%s].firewall_policy.stateless_rule_group_reference", [name]),
        "issueType": "IncorrectValue",
        "keyExpectedValue": sprintf("'aws_networkfirewall_firewall_policy[%s].firewall_policy.stateless_rule_group_reference' should have at least one stateless rule group", [name]),
        "keyActualValue": sprintf("'aws_networkfirewall_firewall_policy[%s].firewall_policy.stateless_rule_group_reference' is empty", [name]),
        "resourceTags": object.get(resource, "tags", {}),
    }
}
