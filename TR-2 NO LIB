package wiz

# Helper to unmarshal JSON-encoded policy
json_unmarshal(str) = obj {
    obj := json.unmarshal(str)
}

# Extract statements from a policy (supports single or array)
get_statements(policy) = statements {
    policy.Statement != null
    statements := policy.Statement
} else = [] {
    not policy.Statement
}

# Rule 1: Overly broad S3 actions
WizPolicy[result] {
    some i, name
    resource := input.document[i].resource.aws_iam_policy[name]
    policy := json_unmarshal(resource.policy)
    st := get_statements(policy)
    statement := st[_]
    statement.Effect == "Allow"

    # This IAM policy must be attached to a Transfer Server role
    contains(lower(name), "transfer")

    # Check for overly broad S3 action
    some action
    action := statement.Action[_]
    startswith(action, "s3:*")

    result := {
        "documentId": input.document[i].id,
        "resourceType": "aws_iam_policy",
        "resourceName": name,
        "issueType": "IncorrectValue",
        "keyExpectedValue": "Avoid overly broad S3 actions",
        "keyActualValue": sprintf("Contains overly broad action: %s", [action])
    }
}

# Rule 2: Overly broad Logs actions
WizPolicy[result] {
    some i, name
    resource := input.document[i].resource.aws_iam_policy[name]
    policy := json_unmarshal(resource.policy)
    st := get_statements(policy)
    statement := st[_]
    statement.Effect == "Allow"

    contains(lower(name), "transfer")

    some action
    action := statement.Action[_]
    startswith(action, "logs:*")

    result := {
        "documentId": input.document[i].id,
        "resourceType": "aws_iam_policy",
        "resourceName": name,
        "issueType": "IncorrectValue",
        "keyExpectedValue": "Avoid overly broad Logs actions",
        "keyActualValue": sprintf("Contains overly broad action: %s", [action])
    }
}

# Rule 3: Overly broad Resource definitions
WizPolicy[result] {
    some i, name
    resource := input.document[i].resource.aws_iam_policy[name]
    policy := json_unmarshal(resource.policy)
    st := get_statements(policy)
    statement := st[_]
    statement.Effect == "Allow"

    contains(lower(name), "transfer")

    some res
    res := statement.Resource[_]
    res == "*"

    result := {
        "documentId": input.document[i].id,
        "resourceType": "aws_iam_policy",
        "resourceName": name,
        "issueType": "IncorrectValue",
        "keyExpectedValue": "Avoid wildcard '*' in resource",
        "keyActualValue": "'policy.Statement.Resource' contains '*'"
    }
}
