package wiz

import data.generic.common as common_lib
import data.generic.terraform as tf_lib

# Actions that must NOT be allowed for ECR Public repositories
restricted_actions := {
    "ecr-public:PutImage",
    "ecr-public:BatchPutImage"
}

# Check for AWS ECR Public Repository policies allowing restricted actions
WizPolicy[result] {
    resourceType := {"aws_ecrpublic_repository_policy"}
    resource := input.document[i].resource[resourceType[idx]][name]

    # Parse the policy JSON
    policy := common_lib.json_unmarshal(resource.policy)
    st := common_lib.get_statement(policy)

    # Iterate through each statement and action
    statement := st[_]
    action := statement.Action[_]

    restricted_actions[action]
    common_lib.is_allow_effect(statement)  # FAIL when effect is ALLOW

    result := {
        "documentId": input.document[i].id,
        "resourceType": resourceType[idx],
        "resourceName": tf_lib.get_resource_name(resource, name),
        "searchKey": sprintf("%s[%s].policy", [resourceType[idx], name]),
        "issueType": "IncorrectValue",
        "keyExpectedValue": sprintf("'%s' actions must be denied for ECR Public repositories", [action]),
        "keyActualValue": sprintf("'%s' action is allowed in policy", [action]),
        "searchLine": common_lib.build_search_line(["resource", resourceType[idx], name, "policy"], [])
    }
}

# Check for AWS IAM policy documents (inline or data sources) allowing restricted actions
WizPolicy[result] {
    resourceType := {"aws_iam_policy_document"}
    resource := input.document[i].data[resourceType[idx]][name]

    policy := {"Statement": resource.statement}
    st := common_lib.get_statement(policy)

    statement := st[_]
    action := statement.actions[_]

    restricted_actions[action]
    lower(statement.effect) == "allow"  # FAIL when Effect is ALLOW

    result := {
        "documentId": input.document[i].id,
        "resourceType": resourceType[idx],
        "resourceName": tf_lib.get_resource_name(resource, name),
        "searchKey": sprintf("%s[%s].statement", [resourceType[idx], name]),
        "issueType": "IncorrectValue",
        "keyExpectedValue": sprintf("'%s' actions must be denied for ECR Public repositories", [action]),
        "keyActualValue": sprintf("'%s' action is allowed in policy", [action]),
        "searchLine": common_lib.build_search_line(["data", resourceType[idx], name, "statement"], [])
    }
}
