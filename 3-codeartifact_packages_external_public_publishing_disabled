package wiz

default result = "fail"

# Rule passes if all packages have publishing blocked (i.e., public publishing disabled)
result = "pass" {
    count(input.repositories) > 0
    all_packages_block_public_publishing
}

# Skip evaluation if no repositories exist
result = "skip" {
    not input.repositories
}

# Helper rule to validate all packages have public publishing blocked
all_packages_block_public_publishing {
    not exists_publicly_publishable_package
}

# Identifies if any package allows public publishing
exists_publicly_publishable_package {
    some repo
    repo := input.repositories[_]
    some pkg
    pkg := repo.packages[_]
    pkg.origin_configuration.restrictions.publish == "ALLOW"
    pkg.latest_version.origin.origin_type == "INTERNAL"
}

# Description of what we expect
expectedConfiguration := "All CodeArtifact packages with internal origin must have public publishing blocked to prevent dependency confusion."

# Optional: Summarized status for insights
currentConfiguration := sprintf("%d out of %d repositories contain packages with public publishing allowed.", [
    count([pkg |
        repo := input.repositories[_];
        pkg := repo.packages[_];
        pkg.origin_configuration.restrictions.publish == "ALLOW";
        pkg.latest_version.origin.origin_type == "INTERNAL"
    ]),
    count([repo |
        repo := input.repositories[_];
        count(repo.packages) > 0
    ])
])


JSON
===
{
  "repositories": [
    {
      "name": "secure-repo",
      "packages": [
        {
          "name": "internal-pkg",
          "origin_configuration": {
            "restrictions": {
              "publish": "BLOCK",
              "upstream": "BLOCK"
            }
          },
          "latest_version": {
            "origin": {
              "origin_type": "INTERNAL"
            }
          }
        }
      ]
    }
  ]
}


{
  "repositories": [
    {
      "name": "vulnerable-repo",
      "packages": [
        {
          "name": "internal-pkg",
          "origin_configuration": {
            "restrictions": {
              "publish": "ALLOW",
              "upstream": "ALLOW"
            }
          },
          "latest_version": {
            "origin": {
              "origin_type": "INTERNAL"
            }
          }
        }
      ]
    }
  ]
}
